# PopupChatKit Backend
# Python 后端项目配置文件
# 包管理工具: uv

[project]
name = "popupchatkit-backend"
version = "1.0.0"
description = "PopupChatKit 后端服务 - 基于 FastAPI 和 pydantic-ai 的 AI 对话系统"
authors = [
    {name = "Colin", email = "your-email@example.com"}
]
requires-python = ">=3.10"
license = {text = "MIT"}
keywords = ["ai", "chatbot", "fastapi", "pydantic-ai", "llm"]

# 项目依赖
dependencies = [
    # Web 框架
    "fastapi>=0.109.0",
    "uvicorn[standard]>=0.27.0",
    "python-multipart>=0.0.6", # 表单数据解析
    # AI 相关
    "pydantic-ai>=0.0.7",
    "openai>=1.12.0", # OpenAI SDK (pydantic-ai 依赖)
    # 数据处理
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    # 工具库
    "httpx>=0.26.0", # HTTP 客户端
    "aiofiles>=23.2.1", # 异步文件操作
    "python-jose[cryptography]>=3.3.0", # JWT 加密
    "passlib[bcrypt]>=1.7.4", # 密码加密
    # 日志和监控 (可选)
    "logfire>=0.23.0", # Pydantic Logfire (可选)
    "python-dotenv>=1.2.1",
]

[project.optional-dependencies]
# 开发依赖
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.26.0",            # 测试 HTTP 请求
    "black>=23.12.0",           # 代码格式化
    "ruff>=0.1.9",              # 代码检查
    "mypy>=1.8.0",              # 类型检查
]

# 生产依赖
prod = [
    "gunicorn>=21.2.0",         # 生产环境 WSGI 服务器
]

[project.urls]
homepage = "https://github.com/your-username/PopupChatKit"
repository = "https://github.com/your-username/PopupChatKit"
documentation = "https://github.com/your-username/PopupChatKit/wiki"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["backend"]

# ============================================
# Ruff 配置 (代码检查和格式化)
# ============================================
[tool.ruff]
# 目标 Python 版本
target-version = "py310"

# 每行最大字符数
line-length = 100

# 排除的文件和目录
exclude = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    "*.pyc",
    ".pytest_cache",
    ".mypy_cache",
    "dist",
    "build",
]

[tool.ruff.lint]
# 启用的规则集
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]

# 忽略的规则
ignore = [
    "E501",  # 行太长 (由 formatter 处理)
    "B008",  # 函数调用中的参数默认值
    "W191",  # 使用制表符缩进
]

# 允许自动修复
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
# 测试文件中允许的规则例外
"tests/**/*.py" = [
    "S101",  # 允许使用 assert
]

# ============================================
# Black 配置 (代码格式化)
# ============================================
[tool.black]
line-length = 100
target-version = ["py310", "py311"]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.venv
  | venv
  | __pycache__
  | \.pytest_cache
  | \.mypy_cache
  | dist
  | build
)/
'''

# ============================================
# MyPy 配置 (类型检查)
# ============================================
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true

# 排除的模块
[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

# ============================================
# Pytest 配置 (测试)
# ============================================
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
pythonpath = ["."]
asyncio_mode = "auto"

# 测试覆盖率配置
addopts = [
    "--cov=backend",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--strict-markers",
    "-v"
]

# 标记定义
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# ============================================
# Coverage 配置 (测试覆盖率)
# ============================================
[tool.coverage.run]
source = ["backend"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
precision = 2
skip_empty = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

# ============================================
# UV 工具配置
# ============================================
[tool.uv]
# 使用最新的依赖解析器
resolution = "highest"

# 开发依赖组
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.12.0",
    "ruff>=0.1.9",
    "mypy>=1.8.0",
]

# ============================================
# 项目元数据
# ============================================
[tool.hatch.metadata]
allow-direct-references = true

# ============================================
# 环境变量配置说明
# ============================================
# 创建 .env 文件并配置以下变量:
#
# # AI 模型配置
# ZHIPU_API_KEY=your_zhipu_api_key_here
# QWEN_API_KEY=your_qwen_api_key_here
#
# # 数据库配置
# DB_PATH=../data/chat.db
#
# # 服务器配置
# HOST=0.0.0.0
# PORT=8000
# DEBUG=true
#
# # 安全配置
# SECRET_KEY=your-secret-key-here
# ALGORITHM=HS256
# ACCESS_TOKEN_EXPIRE_MINUTES=30
#
# # 日志配置
# LOG_LEVEL=INFO
# LOGFIRE_TOKEN=your_logfire_token_here  # 可选
#
# # CORS 配置
# ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8000
